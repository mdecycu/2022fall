var tipuesearch = {"pages": [{'title': 'About', 'text': '網站:  https://mde.tw/2022fall \xa0 \n 倉儲:  https://github.com/mdecycu/2022fall \xa0 \n 本網站主要統整 2022 Fall  計算機程式 以及 電腦輔助設計與實習 課程的相關內容、議題與對策. \n 相關課程: \n 網際內容管理  https://mde.tw/wcm2023 \xa0 \n 協同產品設計實習  https://mde.tw/cd2023 \xa0', 'tags': '', 'url': 'About.html'}, {'title': 'networking', 'text': 'IPv4 與 IPv6 是兩種不同架構的網路協定, 由於 IPv4 網路協定已經不敷目前網路應用所需, 因此衍生出 IPv6 網路協定. 但由於 IPv4 網路協定已經使用超過 40 年, 因此仍會存在很長一段時間. 在可見的未來, IPv4 與 IPv6 網路協定將會同時存在. \n 在 Windows 操作系統可在命令列以 ipconfig /all 取的與 internet protocol configuration 有關的資訊. \n 若電腦環境只提供 IPv4 網路協定, 但需要透過特定網路協定 (包括 http(s), ssh, sftp 等協定) 與只支援 IPv6 網路協定的網站進行資料交換, 就必須設定能夠提供雙網路 (IPv4 與 IPv6) 協定的代理主機 (Proxy server). \n http(s): \n 在 Windows 操作系統下, Edge 與 Chrome 只能使用操作系統設定的代理主機, 而 Firefox 與 Waterfox 則可以使用操作系統的代理主機設定, 或者自行設定連線的代理主機. \n ssh (sftp): \n 在 Windows 操作系統下的 ssh 網路協定, 可以利用 putty 進行設定, 並以 session 名稱代表 putty 中與 proxy 及 Auth (認證) 有關的設定. putty 中的 puttygen.exe 可以建立 OpenSSH 格式的 public key, 以及 putty 格式的 private key. 為了在近端連線到 Github, OpenSSH 格式的 public key 必須送到 Github 帳號下 Settings 的 SSH and GPG keys 區. 而 putty 中有關 session 的設定則會被存入以下登錄區: \n 電腦\\HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham\\PuTTY \n 另外, 在 Windows 操作系統希望採用 putty 設定 git 連線用的 ssh, 必須在啟動可攜系統時, 宣告: \n set GIT_SSH=%cd%\\putty\\plink.exe \n 在 Linux 操作系統下的 ssh 網路協定, 可以利用 ssh-keygen 建立, 內定的 keys 將會存入使用者工作目錄下的 .ssh 目錄, 且以 id_rsa 與 id_rsa.pub 代表其 private key 與 public key. 至於 Linux 環境下的 ssh proxy 設定, 則位於 .ssh/config 檔案中, config 的設定格式為: \n Host demo \n User git \n Hostname github.com \n ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p', 'tags': '', 'url': 'networking.html'}, {'title': 'cmsimde', 'text': 'https://github.com/mdecycu/cmsimde \xa0是一套利用 Python +  Flask  建立的網際內容管理系統. \n 了解 cmsimde 的設計理念與架構, 將有助於有效運用這一套系統. \n cmsimde 主要讓使用者可以利用  Github  倉儲建立靜態網站, 並可在近端與 Windows 或 Linux 操作系統上建立動態網站. \n 所謂靜態網站指的是一個 WWW 全球資訊網伺服器, 只負責伺服 html 網頁、  Javascript  程式以及相關檔案. \n 之所以稱為靜態, 是指此網頁除了透過在客戶端 (瀏覽器) 上執行的 Javascript 程式外, 無伺服器上的程式可直接改變網站內容, 且網站上沒有讓使用者 login 的機制. \n 相較之下, 所謂動態網站, 則指具備 login 機制, 使用者登入網際內容管理系統後, 可以直接更動網站內容. \n 利用 cmsimde 建立的動態網站可以轉為靜態網站內容.\xa0 \n 能夠執行 cmsimde 動態網站的 Python 需要安裝下列模組: \n flask flask_cors bs4 lxml pelican markdown pyopenssl \n 而在近端為了管理 cmsimde 中的網際簡報與網誌, 通常建議再加裝 leo 模組, 因此希望執行 cmsimde 動態網站的 Python 環境, 需要以 pip 安裝所需模組: \n pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl \xa0', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Git', 'text': 'Git 是在 2005 年為了有效管理 Linux 操作系統的原始碼而建立. 具有分散式版次管理的特性, 在多人協同開發程式碼的過程, 可以清楚看出各程式段由誰貢獻, 且其分支架構可以讓使用者切出不會影響主分支的版本進行改版, 一旦主分支之外的版本完成後, 可以選擇將改版功能合併至主分支或保留紀錄. \n 在可攜程式環境中所提供的 git.exe 指令程式來自\xa0 Git - Downloading Package (git-scm.com) \xa0中的 portablegit.', 'tags': '', 'url': 'Git.html'}, {'title': 'Github', 'text': '', 'tags': '', 'url': 'Github.html'}, {'title': 'Pages', 'text': '', 'tags': '', 'url': 'Pages.html'}, {'title': 'Classroom', 'text': '', 'tags': '', 'url': 'Classroom.html'}, {'title': 'QandA', 'text': '使用 Github 免費帳號, 有單一檔案容量大小的限制, 若在近端改版時帶有無法 push 至 Github 倉儲的大容量檔案, 該如何處理? \n \n Github 有關改版檔案大小限制的說明: \n \n About large files on GitHub - GitHub Docs \n \n GitHub limits the size of files you can track in regular Git repositories. \n \n If you attempt to add or update a file that is larger than 50 MB, you will receive a warning from Git. The changes will still successfully push to your repository, but you can consider removing the commit to minimize performance impact. \n \n 改版提交單一檔案容量大小限制為  50 MB . 但是若提交單一檔案 50 MB 時, 將會影響工作效率. \n \n 至於利用瀏覽器, 將檔案上傳至 Github 倉儲的單一檔案容量限制則為  25 MB . \n \n Github 針對 已經新增提交 單一檔案超過 50 MB 的處理 如下 : \n \n 在命令列執行指令, 刪除超過容量的大檔案, 若檔案名稱為 big_file.mp4 \n \n git rm --cached big_file.mp4 \n \n 接著執行下列指令進行訂正 (amend): \n \n git commit --amend -CHEAD \n \n 然後再將訂正後的版本推送到 Github: \n \n git push \n \n 其他可行的處理方式, 請參考  https://mde.tw/demo/content/Windows.html  , 看看你是哪種情況: \n \n 近端改版尚未提交, 僅對某些檔案進行變更, 但希望刪除這些變更: git checkout . (表示將近端檔案與遠端保持同步). \n 近端改版已經提交但尚未推送, 希望刪除這些變更: git reset --soft HEAD~, 或者再加上希望刪除的前幾次變更數字. \n 近端改版已經推送, 但希望刪除這些提交推送的改版內容: git revert 版次號 --no-edit \n \n', 'tags': '', 'url': 'QandA.html'}, {'title': 'repo', 'text': '', 'tags': '', 'url': 'repo.html'}, {'title': 'localhost', 'text': '', 'tags': '', 'url': 'localhost.html'}, {'title': 'Replit', 'text': '', 'tags': '', 'url': 'Replit.html'}, {'title': 'Stud', 'text': '', 'tags': '', 'url': 'Stud.html'}, {'title': 'Python', 'text': 'Python 是一種解譯式程式語言, 使用者編寫程式碼後, 可以直接執行, 從使用者要求 Python 程式執行時, 解譯器 (Interpreter) 會即時將原始碼轉為 Byte code, 然後根據所在操作系統的二位元檔案格式轉為可以執行的格式後執行. \n 與解譯式程式語言相對的是編譯式程式語言, 例如: C/C++ 或 Rust 等. 編譯器稱為 Compiler, 當使用者完成 C 或 C++ 程式開發後, 通常需要進行編譯 (Compile) 與連結 (Link) 等過程, 才能得到可以執行的命令檔案. \n 最早出現的 Python 解譯器, 是採用 C 程式語言編寫的, 稱為 CPython. 此外也有採用 Python 編寫的 Python 解譯器, 稱為  Pypy . 也又用 Java 編寫的 Python 解譯器, 稱為  Jython . 以及採用 .NET 技術編寫的  IronPython . \n 至於利用 Javascript 編寫的 Python 解譯器, 其中一種稱為  Brython . \n Brython 的執行機制是讓使用者在網頁中導入以 Javascript 編寫的 Python 解譯器程式庫之後, 再將使用者寫在網頁超文件 <script type="text/python"></script> 標註中的 Python 程式碼轉為 Javascript 後執行. \n Brython 是一種網頁前端的 Python 程式語言 , 由於 Brython 程式碼的執行需要在客戶端的瀏覽器, 將伺服器中的 Brython 解譯器下載至客戶端, 之後下載伺服器上所要執行的 Brython 程式原始碼之後, 才能利用瀏覽器中的 Javascript 解譯器進行轉檔後執行, 因此: \n Brython 並沒有 CPython 眾多的各式程式庫檔案 , 而比較適合如 Javascript 解譯器一樣, 讓網站開發者將輕巧的 Brython 程式碼放在網頁中, 並設法與位於伺服器中的其他 CPython 程式結合使用. 以便達到較少延遲的網頁互動反應效能. \n Brython 在網站前端, 加上伺服器後端的 CPython 結合應用機制, 就如同  Node.js  或  Deno  網站程式開發機制.', 'tags': '', 'url': 'Python.html'}, {'title': 'Brython', 'text': 'cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'CAD', 'text': '', 'tags': '', 'url': 'CAD.html'}, {'title': 'Solvespace', 'text': '', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'NX', 'text': '', 'tags': '', 'url': 'NX.html'}, {'title': 'Onshape', 'text': '', 'tags': '', 'url': 'Onshape.html'}, {'title': 'CoppeliaSim', 'text': 'CoppeliaSim 教育版 4.3.0 rev12  下載 \xa0(134 MB, 必須登入 @nfu OneDrive 帳號後才能下載).', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'Python\xa0script', 'text': 'CoppeliaSim 4.3.0 rev12 可以採 Python script 控制場景中的元件. 但必須在 C:\\CoppeliaSimEdu_4.3.0_rev12\\system\\usrset.txt 中進行設定: \n 原先 usrset.txt 172 與 173 行內容: \n defaultPython = // e.g. c:/Python38/python.exe executeUnsafe = false // recommended to keep false. \n 假設 python.exe 位於\xa0C:\\portable_python_w10_nx_robodk\\Python38 目錄下, 則為了讓 CoppeliaSim 能夠在場景中解譯 Python script, usrset.txt 的 172 與 173 行必須改為: \n defaultPython = C:/portable_python_w10_nx_robodk/Python38/python.exe executeUnsafe =\xa0true \n 假如使用 Python 3.10.6 解譯系統, 則\xa0 usrset.txt 的 172 與 173 行必須改為: \n defaultPython = \xa0 C:/portable_python_w10_nx_robodk/Python310/python.exe executeUnsafe =\xa0true \n C:\\CoppeliaSimEdu_4.3.0_rev12\\system\\usrset.txt 設定檔案修改之後, CoppeliaSim 必須重新啟動設定才會生效.', 'tags': '', 'url': 'Python\xa0script.html'}, {'title': 'Examples', 'text': '', 'tags': '', 'url': 'Examples.html'}, {'title': 'cp2022', 'text': '為何學習計算機程式需要建立個人倉儲? \n 從\xa0 Stack Overflow Developer Survey 2022 \xa0可得知, 專業的程式開發者將 Git 視為最基本的工具. 而 Git 工具的使用與個人在 Github 的倉儲相結合, 可以有效採分散式的方式管理個人或團隊所開發的程式碼.\xa0 \n 因此在學習計算機程式時, 若能同時熟悉位於 Github 中個人倉儲的維護, 將可在隨後的應用中採取與專業人士相容的處理流程與模式. \n 全球資訊網能夠提供甚麼功能或有什麼優點? \n Replit, stud.cycu.org 與 localhost 分別代表甚麼? \n https, ssh 到底提供使用者那些功能或優點? \n Brython 與 Python 有甚麼差別? \n 能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼? \n 變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?', 'tags': '', 'url': 'cp2022.html'}, {'title': 'w17', 'text': '\n 函式定義與呼叫 \n def length(inch):\n    #sum = 0\n    #start = 1\n    #end = 100\n    \'\'\'\n    for i in range(start,end+1,1):\n        sum = sum + i\n        #print(i)\n    print("由" + str(start) + " 加到 " + str(end) + " 等於:" + str(sum))\n    \'\'\'\n    cm = inch * 2.54\n    print(cm)\n\n\'\'\'\nsumto(1,10)\nsumto(3, 100)\n\'\'\'\nlength(5) \n 列出 Python 關鍵字: \n import keyword\nprint(keyword.kwlist)\n\'\'\'\n[\'False\', \'None\', \'True\', \'and\', \'as\', \'assert\', \'async\', \'await\', \'break\', \'class\', \'continue\', \'def\', \'del\', \'elif\', \'else\', \'except\', \'finally\', \'for\', \'from\', \'global\', \'if\', \'import\', \'in\', \'is\', \'lambda\', \'nonlocal\', \'not\', \'or\', \'pass\', \'raise\', \'return\', \'try\', \'while\', \'with\', \'yield\']\n\'\'\' \n', 'tags': '', 'url': 'w17.html'}, {'title': 'canvas', 'text': ' 納入 Brython 環境  \n \n \n  啟動 Brython  \n \n \n  給定 brython_div1 division 標註  \n \n  加入啟動按鈕後的 Rect 行走程式原始碼  \n \n \n 關鍵程式碼: \n #grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")\n#draw_line(0, 0, 600, 600, color="black")\n\nctx.beginPath()\nctx.arc(100, 75, 50, 0, math.pi)\nctx.stroke()', 'tags': '', 'url': 'canvas.html'}]};